name: Helios Release

on:
  workflow_dispatch: # manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for version calculation
      - name: Update Package Lists
        run: sudo apt-get update
      - name: Install Base Dependencies
        run: sudo apt-get install valgrind g++ make --fix-missing
      - name: Install Project Dependencies
        run: make install
      - name: Install Emscripten
        run: |
          sudo apt install -y cmake python3
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
      - name: Build Complete Package
        run: |
          source ./emsdk/emsdk_env.sh
          make package
      - name: Upload Complete Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: helios-complete-package
          path: helios-*.zip

  tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
      - name: Download Complete Package
        uses: actions/download-artifact@v4
        with:
          name: helios-complete-package
          path: ./package
      - name: Extract Package for Testing
        run: |
          cd package
          unzip helios-*.zip -d extracted/
          # Copy CLI binary to expected location for tests
          mkdir -p ../HeliosCLI/build/desktop/
          cp extracted/cli/helios ../HeliosCLI/build/desktop/
      - name: Set execute permissions for test script
        run: chmod +x ./run_tests.sh
        working-directory: tests
      - name: Run general tests
        run: ./run_tests.sh
        working-directory: tests

  release:
    needs: tests
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for calculating version

      - name: Get the latest tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "none")
          echo "tag=$latest_tag" >> $GITHUB_ENV

      - name: Check for existing tags
        id: check_tag
        run: |
          if [ "${{ env.tag }}" == "none" ]; then
            echo "No tags found. Creating initial tag 1.0.0."
            echo "new_tag=1.0.0" >> $GITHUB_ENV
          fi

      - name: Calculate new version
        id: calc_version
        run: |
          if [ "${{ env.new_tag }}" == "" ]; then
            latest_tag=${{ env.tag }}
            commits_since_tag=$(git rev-list $latest_tag..HEAD --count)
            IFS='.' read -ra ADDR <<< "$latest_tag"
            patch=$((ADDR[2] + commits_since_tag))
            new_version="${ADDR[0]}.${ADDR[1]}.$patch"
            echo "new_version=$new_version" >> $GITHUB_ENV
            echo "new_tag=$new_version" >> $GITHUB_ENV
          else
            echo "new_version=${{ env.new_tag }}" >> $GITHUB_ENV
          fi

      - name: Check if new tag exists
        run: |
          if git rev-parse "refs/tags/${{ env.new_tag }}" >/dev/null 2>&1; then
            echo "Tag ${{ env.new_tag }} already exists. Skipping tag creation."
            echo "tag_exists=true" >> $GITHUB_ENV
          else
            echo "tag_exists=false" >> $GITHUB_ENV
          fi

      - name: Create a new tag
        if: env.tag_exists == 'false'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag ${{ env.new_tag }}
          git push origin ${{ env.new_tag }}

      - name: Download Complete Package
        uses: actions/download-artifact@v4
        with:
          name: helios-complete-package
          path: ./package

      - name: Extract Package for Release
        run: |
          cd package
          unzip helios-*.zip -d extracted/
          ls -la extracted/

      - name: Create GitHub Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.new_tag }}
          name: Helios ${{ env.new_version }}
          body: |
            Release of Helios version ${{ env.new_version }}

            This release includes:
            - CLI binary for desktop use
            - Embedded firmware files (hex, bin, elf, map)
            - WebAssembly library for web integration
            - Complete documentation

            Download the complete package or individual components below.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Complete Package
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./package/helios-*.zip
          asset_name: helios-complete-${{ env.new_version }}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload CLI Binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./package/extracted/cli/helios
          asset_name: helios-cli
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Embedded Hex File
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./package/extracted/embedded/helios.hex
          asset_name: helios.hex
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Embedded Binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./package/extracted/embedded/helios.bin
          asset_name: helios.bin
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload WASM Library
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./package/extracted/wasm/HeliosLib.js
          asset_name: HeliosLib.js
          asset_content_type: application/javascript
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload WASM Binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./package/extracted/wasm/HeliosLib.wasm
          asset_name: HeliosLib.wasm
          asset_content_type: application/wasm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

